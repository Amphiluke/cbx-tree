/*!
cbx-tree v1.0.0
https://github.com/Amphiluke/cbx-tree#readme
(c) 2025 Amphiluke
*/
const e=(e,i=!0)=>`\n<ul part="tree" role="${i?"tree":"group"}">\n  ${[...e.values()].reduce(((e,i)=>e+t(i)),"")}\n</ul>`,t=({id:t,title:i,icon:r,children:a})=>`\n<li part="item" role="treeitem" ${a?.size?' aria-expanded="true"':a?' aria-expanded="false"':""}>\n  ${void 0!==a?'<button type="button" part="toggle"></button>':""}\n  <label part="label">\n    <input type="checkbox" id="cbx_${t}" part="checkbox">\n    ${r?`<img src="${(e=>["&",'"'].reduce(((e,t)=>e.replaceAll(t,`&#${t.charCodeAt(0)};`)),e))(r)}" alt="" part="icon">`:""}\n    <span part="title">${i}</span>\n  </label>\n  ${a?.size>0?e(a,!1):""}\n</li>`,i=new CSSStyleSheet;i.replaceSync(':host(:not([hidden])){display:block}[part=tree]{list-style:none;margin:0;padding:0}[part=item]{align-items:center;display:grid;gap:.4em .6ch;grid-template-areas:"toggle label" "tree   tree";grid-template-columns:1em 1fr;&[aria-expanded=false]>[part=tree]{display:none}}[part=toggle]{--toggle-closed: url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8 14" width="8" height="14"><path d="M1.5 2.5v9L7 7z"/></svg>\');--toggle-opened: url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14 8" width="14" height="8"><path d="M2.5 1.5h9L7 7z"/></svg>\');background:#0000 var(--toggle-closed) 50% 50% no-repeat;border:none;cursor:pointer;font:inherit;grid-area:toggle;height:1em;padding:0;position:relative;width:1em;[aria-expanded=true]>&{background-image:var(--toggle-opened)}&:before{content:"";inset:-4px;position:absolute}}[part=label]{align-items:inherit;display:flex;gap:inherit;grid-area:label}:where([part=item]) [part=tree]{grid-area:tree;padding-inline-start:1em}');class r extends HTMLElement{static get formAssociated(){return!0}#e;#t;#i=new Map;#r=new Set;get formData(){const e=new FormData,{name:t}=this;return this.#r.forEach((i=>e.append(t,i))),e}get form(){return this.#t.form}get name(){return this.getAttribute("name")}set name(e){this.setAttribute("name",e)}get type(){return this.localName}constructor(){super(),this.#e=this.attachShadow({mode:"open",delegatesFocus:!0}),this.#e.adoptedStyleSheets=[i],this.#t=this.attachInternals(),this.#i=this.#a(this.#n()),this.#s(),this.#e.addEventListener("change",(e=>this.#d(e))),this.#e.addEventListener("click",(e=>this.#h(e)))}formResetCallback(){this.#i=this.#a(this.#n()),this.#s()}formStateRestoreCallback(e,t){if("restore"===t)try{this.#i=new Map(JSON.parse(e)),this.#s()}catch(e){console.warn("Failed to restore the tree state",e)}}#d({target:e}){if(!e.part.contains("checkbox"))return;const t=e.id.slice(4),i=e.checked?"add":"delete";this.#r[i](t);const r=this.#c(t);this.#l(r),this.#o(r),this.#t.setFormValue(this.formData,JSON.stringify([...this.#i]))}#h({target:e}){if(!e.part.contains("toggle"))return;const t=e.closest('[role="treeitem"]');t.ariaExpanded="true"===t.ariaExpanded?"false":"true"}#s(){this.#e.setHTMLUnsafe(e(this.#i)),[...this.#e.querySelectorAll('input[part="checkbox"]')].forEach((e=>{const t=this.#c(e.id.slice(4))?.state;e.checked="checked"===t,e.indeterminate="indeterminate"===t}))}#a(e,t){return new Map(e.map(((e,i)=>{const r=t?`${t}:${i}`:String(i);e.checked&&this.#r.add(r);const a={id:r,title:e.title,value:e.value,icon:e.icon,children:e.children?this.#a(e.children,r):e.children};return Object.defineProperty(a,"state",{get:()=>this.#r.has(a.id)?"checked":a.children?.size?this.#p(a):"unchecked"}),[r,a]})))}#c(e){const t=e.split(":");return t.slice(1).reduce(((e,t)=>e?.children?.get(`${e?.id}:${t}`)),this.#i.get(t[0]))}#p(e){const t=new Set([...e.children.values()].map((({state:e})=>e)));return t.has("indeterminate")?"indeterminate":t.has("checked")?t.has("unchecked")?"indeterminate":"checked":"unchecked"}#l(e){if(!e.children)return;const t=this.#r.has(e.id),i=t?"add":"delete";e.children.forEach(((e,r)=>{this.#r[i](r);const a=this.#e.getElementById(`cbx_${r}`);a.checked=t,a.indeterminate=!1,this.#l(e)}))}#o(e){if(this.#i.has(e.id))return;const t=this.#c(e.id.slice(0,e.id.lastIndexOf(":"))),i=this.#p(t);this.#r["checked"===i?"add":"delete"](t.id);const r=this.#e.getElementById(`cbx_${t.id}`);r.checked="checked"===i,r.indeterminate="indeterminate"===i,this.#o(t)}#n(){const e=this.textContent.trim()||"[]";try{const t=JSON.parse(e);if(!Array.isArray(t))throw new TypeError;return t}catch{return console.error(new DOMException("<cbx-tree> contents must be a valid JSON array representation","DataError")),[]}}setData(e){if(!Array.isArray(e))throw new TypeError("Tree data must be an array of tree items");this.#i=this.#a(e),this.#s()}toJSON(){return structuredClone(this.#i)}get validity(){return this.#t.validity}get validationMessage(){return this.#t.validationMessage}get willValidate(){return this.#t.willValidate}checkValidity(){return this.#t.checkValidity()}reportValidity(){return this.#t.reportValidity()}setValidity(...e){return this.#t.setValidity(...e)}}customElements.define("cbx-tree",r);export{r as default};